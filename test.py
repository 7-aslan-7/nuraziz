import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode

API_TOKEN = '6560882506:AAHoHoIZobShtd2vL_G4ebotigiqrnslhWc'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
schedule = {
    "1–ê": ["üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 08:00", "üìñ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - 09:00", "üìú –ò—Å—Ç–æ—Ä–∏—è - 10:00"],
    "1–ë": ["üî¨ –§–∏–∑–∏–∫–∞ - 08:00", "üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 09:00", "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è - 10:00"]
}
events = ["üéâ –®–∫–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç - *15 –Ω–æ—è–±—Ä—è*", "üèÖ –û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ - *25 –Ω–æ—è–±—Ä—è*"]
contacts = {
    "üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏": "@math_teacher",
    "üë®‚Äçüè´ –ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": "@class_teacher"
}
news = ["üçÇ *–û—Å–µ–Ω–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã* —Å *28 –æ–∫—Ç—è–±—Ä—è*", "üìÖ –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å *1 –Ω–æ—è–±—Ä—è*"]

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", callback_data="schedule"),
        InlineKeyboardButton("üéà –°–æ–±—ã—Ç–∏—è —à–∫–æ–ª—ã", callback_data="events"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏—Ç–µ–ª–µ–π", callback_data="contacts"),
        InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ", callback_data="news")
    )

    welcome_text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –≤–∞—à —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìå –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "‚Ä¢ –û—Ç—ã—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ —à–∫–æ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
    )
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
@dp.callback_query_handler(lambda c: c.data == "schedule")
async def show_schedule(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    for class_name in schedule:
        keyboard.add(InlineKeyboardButton(f"üìö {class_name}", callback_data=f"class_{class_name}"))
    await callback_query.message.answer("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda c: c.data.startswith("class_"))
async def display_class_schedule(callback_query: types.CallbackQuery):
    class_name = callback_query.data.split("_")[1]
    class_schedule = "\n".join(schedule.get(class_name, []))
    await callback_query.message.answer(f"üìö *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}:*\n\n{class_schedule}", parse_mode=ParseMode.MARKDOWN)

# –°–æ–±—ã—Ç–∏—è —à–∫–æ–ª—ã
@dp.callback_query_handler(lambda c: c.data == "events")
async def show_events(callback_query: types.CallbackQuery):
    events_text = "\n".join(events)
    await callback_query.message.answer(f"üéâ *–ë–ª–∏–∂–∞–π—à–∏–µ —à–∫–æ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:*\n\n{events_text}", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == "contacts")
async def show_contacts(callback_query: types.CallbackQuery):
    contacts_text = "\n".join([f"{role}: {contact}" for role, contact in contacts.items()])
    await callback_query.message.answer(f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∏—Ç–µ–ª–µ–π:*\n\n{contacts_text}", parse_mode=ParseMode.MARKDOWN)

# –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "news")
async def show_news(callback_query: types.CallbackQuery):
    news_text = "\n".join(news)
    await callback_query.message.answer(f"üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*\n\n{news_text}", parse_mode=ParseMode.MARKDOWN)

    
    
executor.start_polling(dp, skip_updates=True)
